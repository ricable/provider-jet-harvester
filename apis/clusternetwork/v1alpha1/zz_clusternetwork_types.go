/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusternetworkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ClusternetworkParameters struct {

	// +kubebuilder:validation:Optional
	DefaultPhysicalNic *string `json:"defaultPhysicalNic,omitempty" tf:"default_physical_nic,omitempty"`

	// Any text you want that better describes this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Enable *bool `json:"enable" tf:"enable,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ClusternetworkSpec defines the desired state of Clusternetwork
type ClusternetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusternetworkParameters `json:"forProvider"`
}

// ClusternetworkStatus defines the observed state of Clusternetwork.
type ClusternetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusternetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Clusternetwork is the Schema for the Clusternetworks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,harvesterjet}
type Clusternetwork struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusternetworkSpec   `json:"spec"`
	Status            ClusternetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusternetworkList contains a list of Clusternetworks
type ClusternetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Clusternetwork `json:"items"`
}

// Repository type metadata.
var (
	Clusternetwork_Kind             = "Clusternetwork"
	Clusternetwork_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Clusternetwork_Kind}.String()
	Clusternetwork_KindAPIVersion   = Clusternetwork_Kind + "." + CRDGroupVersion.String()
	Clusternetwork_GroupVersionKind = CRDGroupVersion.WithKind(Clusternetwork_Kind)
)

func init() {
	SchemeBuilder.Register(&Clusternetwork{}, &ClusternetworkList{})
}
